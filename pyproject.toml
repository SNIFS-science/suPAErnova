[project]
name = "suPAErnova"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
authors = [
    { name = "Patrick Armstrong", email = "patrick.james.1998@gmail.com" },
]
requires-python = ">=3.12"
dependencies = [
    "astropy>=7.0.1",
    "click>=8.1.8",
    "coloredlogs>=15.0.1",
    "matplotlib>=3.10.0",
    "pandas>=2.2.3",
    "sncosmo>=2.12.0",
    "toml>=0.10.2",
    "tqdm>=4.67.1",
]

[dependency-groups]
dev = ["pandas-stubs>=2.2.3.241126", "types-tensorflow>=2.18.0.20241227"]

default = [
    "tensorflow>=2.18.0",
    "tensorflow-probability>=0.25.0",
    "tf-keras>=2.18.0",
]

# 2.17.0 is the latest version available for ROCM 6.3
rocm = [
    "tensorflow-rocm>=2.17.0,<2.18",
    "tensorflow-probability>=0.24.0,<0.25",
    "tf-keras>=2.17.0,<2.18",
]


[project.scripts]
suPAErnova = "suPAErnova:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# === Tools ===

[tool.uv]
conflicts = [[{ group = "default" }, { group = "rocm" }]]
default-groups = [
    "dev",
    "rocm",
] # Change me to your preferred tensorflow version

[[tool.uv.dependency-metadata]]
name = "tf-keras"
version = "2.17.0"
requires-dist = [
] # Hack to remove tf-keras tensorflow dependency when using tensorflow-rocm

[tool.uv.sources]
tensorflow-rocm = { url = "https://repo.radeon.com/rocm/manylinux/rocm-rel-6.3.2/tensorflow_rocm-2.17.0-cp312-cp312-manylinux_2_28_x86_64.whl" }

[tool.basedpyright]

# Enable all type checks
typeCheckingMode = "all"

# Type Evaluation Settings
analyzeUnannotatedFunctions = false # Useful, but very slow for large projects
strictParameterNoneValue = true
deprecateTypingAliases = true
strictGenericNarrowing = true

# Don't report unknown types
# Otherwise packages which are untyped blow up your diagnostics
reportUnknownParameterType = false
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownVariableType = false
reportUnknownMemberType = false

# Don't report unused call results
# Stops errors around functions with side-effects
# Like matplotlib
reportUnusedCallResult = false

# Don't report when objects are of type Any
reportAny = false
reportExplicitAny = false

# Don't report missing type stubs, as many packages don't include them
reportMissingTypeStubs = false

[tool.ruff]

# Enumerate all fixed violations.
show-fixes = true

# Disable application of unsafe fixes.
unsafe-fixes = true

# --- Format: Ruff ---
[tool.ruff.format]
# Enable preview style formatting
preview = true

# Enable reformatting of code snippets in docstrings.
docstring-code-format = true

[tool.ruff.lint]

# What objects should be treated as logger objects
logger-objects = ["suPAErnova.utils.suPAErnova_logging"]

# Enable preview features
preview = true

# Show all lint rules (except preview) by default
select = ["ALL"]

# Rules to ignore
ignore = [
    "E501",   # Line too long 
    "ERA001", # Found commented out code
    "G004",   # Logging statement uses f-string
    "N999",   # Invalid module name
]

# Consider all rules fixable
fixable = ["ALL"]

# Except these rules
unfixable = [
    "F401", # unused-import, will remove unused imports
    "F841", # unused-variable, will remove unused variables not prepended with an `_`
    "T201", # Print statements
]

# --- Flake8 ---
# Copyright Author
[tool.ruff.lint.flake8-copyright]
author = "Patrick Armstrong"

# Conventions for `from _ import _ as _`
[tool.ruff.lint.flake8-import-conventions.aliases]
matplotlib = "mpl"
"matplotlib.pyplot" = "plt"
"matplotlib.cm" = "cm"
numpy = "np"
pandas = "pd"
tensorflow = "tf"
"tensorflow.keras" = "ks"
"tensorflow_probability" = "tfp"
pytorch = "tch"

# Type Checking
[tool.ruff.lint.flake8-type-checking]
# Move type-specific imports into an if statement
# By placing some type annotations in quotes
quote-annotations = true
# Be strict with type-specific imports
strict = true

# --- ISort ---
[tool.ruff.lint.isort]
case-sensitive = true
combine-as-imports = true
force-sort-within-sections = true
force-wrap-aliases = true
from-first = true
length-sort = true
length-sort-straight = true

# --- PyDocStyle ---
[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = ["typing.overload"]
