[project]
    authors = [
        {name = "Patrick Armstrong", email = "patrick.james.1998@gmail.com"},
    ]
    dependencies = [
        "astropy>=7.0.1",
        "click>=8.1.8",
        "coloredlogs>=15.0.1",
        "pandas>=2.2.3",
        "pydantic>=2.11.3",
        "sncosmo>=2.12.1",
        "tensorflow-probability[tf]>=0.25.0",
        "toml>=0.10.2",
        "tqdm>=4.67.1",
    ]
    description = "Add your description here"
    name = "suPAErnova"
    readme = "README.md"
    requires-python = ">=3.12"
    version = "0.1.0"

    [project.optional-dependencies]
        tf-cpu   = ["tensorflow-cpu"]
        tf-cuda  = ["tensorflow"]
        tf-metal = ["tensorflow-metal"]
        tf-rocm  = ["tensorflow-rocm; sys_platform == 'linux'"]

        tch-cpu   = []
        tch-cuda  = []
        tch-metal = []
        tch-rocm  = []

[build-system]
    build-backend = "hatchling.build"
    requires      = ["hatchling"]

[dependency-groups]
    dev     = ["pandas-stubs>=2.2.3.250308"]
    jupyter = ["jupyter>=1.1.1"]
    tests   = ["pytest>=8.3.5", "supaernova-legacy"]

# === Tools ===
[tool.uv]
    conflicts = [
        [
            {extra = "tf-cpu"},
            {extra = "tf-cuda"},
            {extra = "tf-metal"},
            {extra = "tf-rocm"},
        ],
        [
            {extra = "tch-cpu"},
            {extra = "tch-cuda"},
            {extra = "tch-metal"},
            {extra = "tch-rocm"},
        ],
    ]
    environments = ["sys_platform == 'darwin'", "sys_platform == 'linux'"]
    override-dependencies = ["tensorflow; sys_platform == 'never'"]

    [tool.uv.workspace]
        members = ["packages/*"]

    [tool.uv.sources]
        supaernova-legacy = {workspace = true}
        tensorflow-rocm   = {url = "https://repo.radeon.com/rocm/manylinux/rocm-rel-6.4/tensorflow_rocm-2.18.1-cp312-cp312-manylinux_2_28_x86_64.whl"}

[tool.pytest.ini_options]
    addopts    = ["--import-mode=importlib"]
    markers    = ["setup: Setup cached data without running any tests"]
    pythonpath = ["."]
    testpaths  = ["tests"]

[tool.basedpyright]
    # Enable all type checks
    typeCheckingMode = "all"

    # Type Evaluation Settings
    analyzeUnannotatedFunctions = false # Useful, but very slow for large projects
    deprecateTypingAliases      = true
    strictGenericNarrowing      = true
    strictParameterNoneValue    = true

    # Don't report unknown types
    # Otherwise packages which are untyped blow up your diagnostics
    reportUnknownArgumentType  = false
    reportUnknownLambdaType    = false
    reportUnknownMemberType    = false
    reportUnknownParameterType = false
    reportUnknownVariableType  = false

    # Don't report unecessary type casts
    reportUnnecessaryCast = false

    # Don't report unused call results
    # Stops errors around functions with side-effects
    # Like matplotlib
    reportUnusedCallResult = false

    # Don't report when objects are of type Any
    reportAny         = false
    reportExplicitAny = false

[tool.ruff]
    # Enumerate all fixed violations.
    show-fixes = true

    # Disable application of unsafe fixes.
    unsafe-fixes = true

    # --- Format: Ruff ---
    [tool.ruff.format]
        # Enable preview style formatting
        preview = true

        # Enable reformatting of code snippets in docstrings.
        docstring-code-format = true

    [tool.ruff.lint]
        # Enable preview features
        preview = true

        # Show all lint rules (except preview) by default
        select = ["ALL"]

        # Rules to ignore
        ignore = [
            "COM812",  # Missing trailing comma, already handled by formatter
            "E501",    # Line too long 
            "ERA001",  # Found commented out code
            "G004",    # Logging statement uses f-string
            "N999",    # Invalid module name
            "PLR0913", # Too many arguments in function definition (_ > 5) 
            "PLR0917", # Too many positional arguments (_/5) 
            "ANN401",  # Allow *args: Any and **kwargs: Any
            "UP037",   # Don't remove quotes from type annotations
            "TC008",   # Don't remove quotes from type aliases
            "F722",    # Ignore forward annotation syntax errors
        ]

        per-file-ignores = {"src/suPAErnova/configs/**.py" = [
            "TC001", # Move first party typing-only imports into a TYPE_CHECKING block. Breaks pydantic
            "TC002", # Move third party typing-only imports into a TYPE_CHECKING block. Breaks pydantic
            "TC003", # Move standard library typing-only imports into a TYPE_CHECKING block. Breaks pydantic
        ], "tests/**/*.py" = [
            "S101", # Don't warn when assert is used in tests
        ]}


        # Consider all rules fixable
        fixable = ["ALL"]

        # Except these rules
        unfixable = [
            "F401", # unused-import, will remove unused imports
            "F841", # unused-variable, will remove unused variables not prepended with an `_`
            "T201", # Print statements
        ]

        # --- Flake8 ---
        # Copyright Author
        [tool.ruff.lint.flake8-copyright]
            author = "Patrick Armstrong"

        # Conventions for `from _ import _ as _`
        [tool.ruff.lint.flake8-import-conventions.aliases]
            matplotlib               = "mpl"
            "matplotlib.cm"          = "cm"
            "matplotlib.pyplot"      = "plt"
            numpy                    = "np"
            pandas                   = "pd"
            pytorch                  = "tch"
            tensorflow               = "tf"
            "tensorflow.keras"       = "ks"
            "tensorflow_probability" = "tfp"

        # Type Checking
        [tool.ruff.lint.flake8-type-checking]
            # Move type-specific imports into an if statement
            # By placing some type annotations in quotes
            quote-annotations = true
            # Be strict with type-specific imports
            strict = true

        # --- ISort ---
        [tool.ruff.lint.isort]
            case-sensitive             = true
            combine-as-imports         = true
            force-sort-within-sections = true
            force-wrap-aliases         = true
            from-first                 = true
            length-sort                = true
            length-sort-straight       = true

        # --- PyDocStyle ---
        [tool.ruff.lint.pydocstyle]
            convention        = "google"
            ignore-decorators = ["typing.overload"]
